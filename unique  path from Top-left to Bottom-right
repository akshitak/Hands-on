Solution source - https://www.youtube.com/watch?v=rBAxUTqvlQA
							// THIS  IS  RECURSIONN SOLUTION !!!!
class Solution {
 
    //row -> m
    //column -> n
    static int numberOfPaths(int m, int n)
    {
        // If either given row number is first or given column number is first
        if (m == 1 || n == 1)
            return 1;
 
        // If diagonal movements are allowed then the last addition is required.
        
        //m-1  ----------> To moove right side!
        //n-1  ----------> To move down side!
        // m-1 & n-1 ----> To move diagonally!
        
        return numberOfPaths(m - 1, n) + numberOfPaths(m, n - 1);
        // + numberOfPaths(m-1, n-1);
    }
 
    public static void main(String args[])
    {
        System.out.println(numberOfPaths(3, 3));
    }
}


						// THIS IS USING DP APPROACH !!

class Solution{
  int uniquePath(int m , int n)
{	int dp[m][n];         // we use this  dynamic programming array[][] which is of same size as of i/p.
	for(int i=0;i<m;i++)
	{
	  for(int j=0;j<n;j++)
	   {
	     if(i==0 || j==0)
                dp[i][j] = 1; // This condition sates ki agr Humari "1st Row" ya fir "1st Col" ho toh directly put "1"... ye alogrithm ki standard confition hai. 
	     else
		dp[i][j] = dp[i-1][j] +dp[i][j-1]; // ab jo hum each cell p jyege toh previous cells ki jo value hogi unko add krke current cell ki value lyege ....again 
		                                    //its standard conditon of Alogirthm ((_where we take 2D matrix and then solve it__))
	   }
	}
	return dp[m-1][n-1];
}
}

